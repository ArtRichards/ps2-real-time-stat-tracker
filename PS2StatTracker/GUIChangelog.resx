<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>V 0.6.0.5
Resolved a crash -- Online status updates will break apart API requests to prevent the uri from going over the maximum limit.

V 0.6.0.4
Online status changes only update the killboard. (Lowers weapon grid flickering)
Session HSR growth indicator is now more accurate.
Overlay updates last weapon used total kills and headshots in real-time now.
Minor code cleanup for eventboards.

V 0.6.0.1
Corrected issue where weapon updates would cause a crash and also miscalculate headshot ratio growth.

V 0.6.0
Added on-line indicator for the user and all opponents in the event log.
Added automatic updates.
Reworked images so they are better filtered.
Special characters are no longer accepted as input for a user id.
Re-enabled basic streaming overlay.
Killing a brand new character will count as a kill, however the system will not be able to determine if it was a teammate. This is a limitation of the API.

--Color Changes--
Team killing will show up as light green.
Getting team killed will now show up as orange.

V 0.5.9
Refactored code separating stat tracker into an object managed by the GUI.
Async tasks now are better managed to prevent operations occuring out of order while in parallel.
Added vertical splitter bar for resizing between the event board and weapon grid.
The weapon grid now better displays information across different sizes.
Added BR, KDR, and outfit information to the event board.

V 0.5.7.1
Condensed session functions and corrected a new issue preventing the start session from automatically starting.

V 0.5.7
Fixed a NullReferenceException.
Added retry options if an API update fails. After so many retries a user-prompt occurs.
If a failure occurs and a session is running the update timer will stop running.

V0.5.6
Better error handling.

V0.5.5
Async support added for program operation.
Improved movement and resizing of window.
Improved error handling and reporting.
Config file management improved.
Improved logic around session starting, resuming, switching and ending.
Invalid IDs are reported and will no longer crash the program.
Installer updated to include 4th digit version (considered re-install)

V 0.5.2
Crash fix and some improved error handling around the API.
Killboard refresh speed increased to 5 seconds.

V 0.5.1
Added streaming overlay.
Road kills now show up for the session.

V 0.5.0
New Features
Uses API completely-- removes need for dependencies on Gecko Web Browser or xulRunner.
Starting a session is now done in one button click.
Sessions can be resumed.
A session can be created up to a user specified number of past events. This can be used for the current session. Additionally the option exists to count these events toward the user’s stats.
All items including inventory and vehicles are now tracked.
Headshots with a vehicle or turret now count.

Improvements
Killboard refresh speed has been increased to 6 seconds.
Both weapon grids will default sort descending kills. If the sort is changed it is saved across weapon refreshes.

Fixes
Moving the mouse too fast while dragging the window no longer causes undesired behavior.
Total stats HSR growth percentage now more accurately matches the actual stored floating point number.

Performance
A local cache is created of resolved player data and item data lowering the amount of API calls required.
Since an embedded webrowser is no longer used, the memory footprint is smaller (even with the local cache) and processing JSON is much faster than parsing a full webpage.</value>
  </data>
</root>